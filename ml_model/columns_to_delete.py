

columns_to_delete = [
    "data.data",
"tcp.payload",
"http.file_data",
"udp.payload",
"http.connection",
"http.content_length",
"http.content_type",
"http.date",
"http.file_data",
"http.host",
"http.last_modified",
"http.location",
"http.next_request_in",
"http.next_response_in",
"http.request.full_uri",
"http.request.line",
"http.request.method",
"http.request.uri.path",
"http.request.uri.query",
"http.request.uri.query.parameter",
"http.request.version",
"http.request_in",
"http.response.code",
"http.response.code.desc",
"http.response.line",
"http.response.phrase",
"http.response.version",
"http.response_for.uri",
"http.response_in",
"http.referer",
"http.time",
"http.server",
"json.value.string",
"json.key",
"nbss.continuation_data",
"dns.resp.name",
"ssh.cookie",
"ssh.compression_algorithms_client_to_server_length",
"ssh.compression_algorithms_server_to_client_length",
"ssh.direction",
"ssh.dh_gex.max",
"ssh.dh_gex.min",
"ssh.dh_gex.nbits",
"ssh.encryption_algorithms_client_to_server_length",
"ssh.encryption_algorithms_server_to_client_length",
"ssh.host_key.length",
"ssh.host_key.type_length",
"ssh.kex_algorithms_length",
"ssh.mac_algorithms_client_to_server_length",
"ssh.mac_algorithms_server_to_client_length",
"ssh.message_code",
"ssh.mpint_length",
"ssh.packet_length",
"ssh.packet_length_encrypted",
"ssh.padding_length",
"ssh.padding_string",
"ssh.protocol",
"ssh.server_host_key_algorithms_length",
"radiotap.rxflags",
"radiotap.vendor_oui",
"wlan.analysis.kck",
"wlan.analysis.kek",
"wlan.country_info.fnm",
"wlan.country_info.code",
"wlan.fcs.bad_checksum",
"wlan_radio.channel",
"wlan_radio.frequency",
"udp.dstport",
"udp.srcport",
"ldap",
"smb.access.generic_execute",
"smb.access.generic_read",
"smb.access.generic_write",
"smb.flags.notify",
"smb.flags.response",
"smb.flags2.nt_error",
"smb.flags2.sec_sig",
"smb.mid",
"smb.nt_status",
"smb.server_component",
"smb.pid.high",
"smb.tid",
"smb2.acct",
"smb2.auth_frame",
"smb2.data_offset",
"smb2.domain",
"smb2.filename",
"smb2.header_len",
"smb2.host",
"smb2.previous_sesid",
"smb2.session_flags",
"smb2.write_length",
"dhcp",
"dhcp.cookie",
"dhcp.option.vendor.bsdp.message_type",
"dns.resp.len",
"tls.connection_id",
"tcp.dstport",
"dns.resp.ttl",
"tls.record.version",
"tcp.analysis.flags",
"tls.handshake.version",
"dhcp.ip.server",
"dns.retransmit_request",
"tcp.flags.reset",
"tls.app_data_proto",
"dns.count.queries",
"dhcp.id",
"llc",
"tcp.analysis.retransmission",
"tcp.flags.syn",
"dns.count.auth_rr",
"arp.dst.hw_mac",
"dns",
"mdns",
"smb2.fid",
"dns.qry.name",
"ip.version",
"ssdp",
"dns.flags.response",
"dns.flags.opcode",
"arp.dst.proto_ipv4",
"dns.count.add_rr",
"tcp.analysis.rto_frame",
"ip.src",
"tls.record.content_type",
"wlan.rsn.ie.pmkid",
"wlan_rsna_eapol.keydes.nonce",
"wlan_rsna_eapol.keydes.data_len",
"wlan_rsna_eapol.keydes.msgnr",
"wlan_rsna_eapol.keydes.key_info.key_mic",
"wlan.rsn.capabilities.mfpc",
"wlan.fixed.capabilities.ibss",
"radiotap.channel.flags.ofdm",
"radiotap.channel.flags.cck",
"wlan.fixed.beacon",
"radiotap.channel.freq",
"wlan.fixed.capabilities.ess",
"wlan.rsn.ie.igtk.key",
"wlan.rsn.ie.gtk.key",
"wlan.fixed.timestamp",
"eapol.keydes.replay_counter",
"eapol.keydes.key_len",
"icmpv6.mldr.nb_mcast_records",
"eapol.len",
"smb2.tid",
"dhcp.client_id.duid_ll_hw_type",
"smb2.protocol_id",
"smb2.sesid",
"eapol.type",
"dhcp.ip.client",
"nbss.length",
"smb2.cmd",
"smb2.msg_id",
"dhcp.hw.addr_padding",
"dhcp.ip.relay",
"nbns",
"tls.alert_message.level",
"tls.compress_certificate.compressed_certificate_message.length",
"tls.alert_message.desc",
"dns.retransmit_response",
"dhcp.option.broadcast_address",
"dhcp.option.dhcp_server_id",
"dhcp.option.router",
"dns.ptr.domain_name",
"nbss.type",
"smb2.pid",
"frame.encap_type",
"tcp.analysis.reused_ports",
"arp.hw.type",
"arp.proto.type",
"arp.proto.size",
"icmpv6.ni.nonce",
"arp.hw.size",
"arp.opcode",
"tcp.analysis",
"dns.count.labels",
"ip.proto",
"dns.flags.authoritative",
"tcp.flags.fin",
"dns.flags.checkdisable",
"dhcp.hw.mac_addr",
"dns.count.answers",
"arp.src.hw_mac",
"arp.src.proto_ipv4",
"tcp.flags.ack",
"dns.qry.name.len",
"dns.resp.len.1",
"tls.handshake.session_ticket_length",
"dns.id",
"smb2.buffer_code",
"dns.a",
"ip.ttl",
"wlan_rsna_eapol.keydes.data",
"tls.handshake.extensions_key_share_group",
"tcp.flags.push",
"tls.handshake.extension.type",
"tcp.option_len",
"ip.dst",
"radiotap.rxflags",
"radiotap.vendor_oui",
"wlan.country_info.fnm",
"wlan.country_info.code",
"wlan.fcs.bad_checksum",
"wlan.tag",
"wlan_radio.channel",
"wlan_radio.frequency",
"ldap",
"smb.access.generic_execute",
"smb.access.generic_read",
"smb.access.generic_write",
"smb.flags.notify",
"smb.flags.response",
"smb.flags2.nt_error",
"smb.flags2.sec_sig",
"smb.mid",
"smb.nt_status",
"smb.server_component",
"smb.pid.high",
"smb.tid",
"smb2.acct",
"smb2.auth_frame",
"smb2.data_offset",
"smb2.domain",
"smb2.filename",
"smb2.header_len",
"smb2.host",
"smb2.previous_sesid",
"smb2.session_flags",
"smb2.write_length",
"dhcp.option.vendor.bsdp.message_type",
"dns.resp.len",
"tls.connection_id"
]



def make(columns_delete: list, columns_df) -> list:
    aux = []
    for c in columns_delete:
        if c in columns_df and c not in aux:
            aux.append(c)

    return aux




l = [ "arp",
"data.len",
"tcp.ack",
"tcp.ack_raw",
"tcp.checksum",
"tcp.checksum.status",
"tcp.seq",
"tcp.seq_raw",
"tcp.srcport",
"tcp.time_delta",
"tcp.time_relative",
"udp.length",
"udp.time_relative",
"udp.time_delta",
"dns.time",
"wlan.tag.length",
"wlan.ssid",
"wlan.fc.frag",
"wlan.fc.order",
"wlan.fc.moredata",
"wlan.fc.protected",
"wlan.fc.pwrmgt",
"wlan.fc.type",
"wlan.fc.ds",
"radiotap.present.tsft",
"wlan_radio.phy",
"radiotap.length",
"radiotap.datarate",
"wlan_radio.data_rate",
"frame.len",]

from constants import dtypes

d = dtypes
for k, v in dtypes.items():
    if k in l:
        d[k] = "category"
print(d)